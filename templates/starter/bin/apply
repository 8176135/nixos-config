#!/usr/bin/env bash

VERSION=1.0

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Determine the operating system
export OS=$(uname)

# Primary network interface
if [[ "$OS" != "Darwin" ]]; then
  export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
  echo -e "${GREEN}Found primary network interface $PRIMARY_IFACE${NC}"
fi

# Custom print function
_print() {
  if [[ "$OS" == "Darwin" ]]; then
    echo "$1"
  else
    echo -e "$1"
  fi
}

# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"

  _print "$message"
  read $variable
}

# Fetch username from the system
export USERNAME=$(whoami)

# If the username is 'nixos' or 'root', ask the user for their username
if [[ "$USERNAME" == "nixos" ]] || [[ "$USERNAME" == "root" ]]; then
  _prompt "${YELLOW}You're running as $USERNAME. Please enter your desired username: ${NC}" USERNAME
fi

# Check if git is available
if command -v git >/dev/null 2>&1; then
  # Fetch email and name from git config
  export GIT_EMAIL=$(git config --get user.email)
  export GIT_NAME=$(git config --get user.name)
else
  _print "${RED}Git is not available on this system.${NC}"
fi

# If git email is not found or git is not available, ask the user
if [[ -z "$GIT_EMAIL" ]]; then
  _prompt "${YELLOW}Please enter your email: ${NC}" GIT_EMAIL
fi

# If git name is not found or git is not available, ask the user
if [[ -z "$GIT_NAME" ]]; then
  _prompt "${YELLOW}Please enter your name: ${NC}" GIT_NAME
fi

# Function to identify the boot disk
select_boot_disk() {
  local _boot_disk

  disks=$(lsblk -nd --output NAME,SIZE,MOUNTPOINT | grep -v loop)
  _boot_disk=$(lsblk -no NAME,MOUNTPOINT | grep ' /$' | awk '{print $1}')

  # Check if we've found a boot disk
  if [[ -z "$_boot_disk" ]]; then
    _print "${RED}Unable to determine the boot disk.${NC}"
    _print "${YELLOW}Available disks:${NC}"
    echo "$disks"
    _prompt "${YELLOW}Please choose your boot disk (e.g., nvme0n1, sda): ${NC}" BOOT_DISK
  else
    _print "${GREEN}Boot disk detected: $_boot_disk${NC}"
    BOOT_DISK=$_boot_disk
  fi
}

# Find primary disk if this is NixOS
if [[ "$OS" != "Darwin" ]]; then
  select_boot_disk
fi

# Confirmation step
confirm_details() {
  _print "${GREEN}Username: $USERNAME"
  _print "Email: $GIT_EMAIL"
  _print "Name: $GIT_NAME${NC}"
  if([[ "$OS" != "Darwin" ]]); then
    _print "${GREEN}Primary interface: $PRIMARY_IFACE"
    _print "Boot disk: $BOOT_DISK${NC}"
  fi

  _prompt "${YELLOW}Is this correct? (Y/N): ${NC}" choice

  case "$choice" in
  [Nn] ) _print "${RED}Exiting script.${NC}" && exit 1;;
  [Yy] ) _print "${GREEN}Continuing...${NC}";;
  * ) _print "${RED}Invalid option. Exiting script.${NC}" && exit 1;;
  esac
}

# Call the confirmation function
confirm_details

# Function to replace tokens in each file
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
    else
      # Linux or other
      sed -i -e "s/%USER%/$USERNAME/g" "$file"
      sed -i -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      sed -i -e "s/%NAME%/$GIT_NAME/g" "$file"
      sed -i -e "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file"
      sed -i -e "s/%DISK%/$BOOT_DISK/g" "$file"
    fi
  fi
}

# Traverse directories and call replace_tokens on each Nix file
export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}User information applied.${NC}"
