#+TITLE: Emacs
#+STARTUP: content

* Configuration   :emacs:
** About Emacs
This is my emacs config file. Yes, in emacs you can write configuration like a Google Doc and get away with it. It's called [[https://en.wikipedia.org/wiki/Literate_programming]["literate programming"]].

Emacs is more than an editor, it's a whole damn operating system. This file is evidence of that. This configuration drives how I interact with my journal, complete and organize tasks, develop and write blog posts, write code and ship new stuff, etc. etc. etc. list goes on. I've yet to jump into EXWM, but if one is so inclined, Emacs can expand beyond an application into all software.

** Personal Information
Just me!

#+NAME: personal-info
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Dustin Lyons"
    user-mail-address "hello@dustinlyons.co")
#+END_SRC

** Initialization
*** Booting up
Mainly splash screen settings. In the future we may look to optimize performance here.
#+NAME: startup
#+BEGIN_SRC emacs-lisp
  ;; Turn off the splash screen
  (setq inhibit-startup-screen t)
  ;; Turn off the splash screen
  (setq initial-scratch-message nil)
  ;; Confirm before exiting Emacs
  (setq confirm-kill-emacs #'yes-or-no-p)
#+END_SRC

*** Add package sources
This associates our package manager with the right source (MELPA).

#+NAME: package-sources
#+BEGIN_SRC emacs-lisp
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (unless (assoc-default "nongnu" package-archives)
    (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t))
#+END_SRC

*** System Definitions
**** Conditionals
#+BEGIN_SRC emacs-lisp
(defun system-is-mac ()
  "Return true if system is darwin-based (Mac OS X)"
  (string-equal system-type "darwin"))

(defun system-is-linux ()
  "Return true if system is GNU/Linux-based"
  (string-equal system-type "gnu/linux"))

#+END_SRC

*** Hydra framework
Hydra enables me drop into quick keybinding modes. See [[https://github.com/abo-abo/hydra][here]].

#+NAME: hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

*** Counsel/Ivy framework
Ivy and associated helpers that uses the minibuffer (the info window at the bottom).

#+NAME: ivy-framework
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :demand t
    :bind (("M-x" . counsel-M-x)
      ("C-x b" . counsel-ibuffer)
      ("C-x C-f" . counsel-find-file)
      ("C-M-j" . counsel-switch-buffer)
    :map minibuffer-local-map
      ("C-r" . 'counsel-minibuffer-history))
    :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
      (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package ivy
    :bind (("C-s" . swiper)
    :map ivy-minibuffer-map
      ("TAB" . ivy-alt-done)
      ("C-f" . ivy-alt-done)
      ("C-l" . ivy-alt-done)
      ("C-j" . ivy-next-line)
      ("C-k" . ivy-previous-line)
    :map ivy-switch-buffer-map
      ("C-k" . ivy-previous-line)
      ("C-l" . ivy-done)
      ("C-d" . ivy-switch-buffer-kill)
    :map ivy-reverse-i-search-map
      ("C-k" . ivy-previous-line)
      ("C-d" . ivy-reverse-i-search-kill))
    :init
      (ivy-mode 1)
    :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-wrap t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t))

  (use-package ivy-rich
    :init (ivy-rich-mode 1))

  (use-package all-the-icons-ivy
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+END_SRC

*** Leader keys
I use general.el to define groups of keybindings under my 'leader' definition. You will see these definitions sprinkled throughout this file; my own private collection of fast shit. For more info, [[https://medium.com/usevim/vim-101-what-is-the-leader-key-f2f5c1fa610f][here]] is a good explanation on leader keys.

#+NAME: keybindings
#+BEGIN_SRC emacs-lisp
  ;; ESC will also cancel/quit/etc.
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer dl/leader-keys
      :keymaps '(normal visual emacs)
      :prefix ","))
#+END_SRC

**** Toggles
Turn UI things on and off, scale things up and down.

#+NAME: ui-toggles
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "big")
    ("k" text-scale-decrease "small")
    ("q" nil "quit" :exit t))

  (dl/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(treemacs :which-key "treemacs")
    "tl" '(lsp :which-key "lsp")
    "th" '(counsel-load-theme :which-key "choose theme")
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+END_SRC

***** Rotate windows
Various helpers and packages I find useful for window management.

#+BEGIN_SRC emacs-lisp

  ;; Rotates windows and layouts
  (use-package rotate
    :config)

  (dl/leader-keys
    "r"  '(:ignore t :which-key "rotate")
    "rw"  '(rotate-window :which-key "rotate window")
    "rl"  '(rotate-layout :which-key "rotate layout"))

#+END_SRC
**** Gutter
***** Line numbers
These functions define vim-style relative line numbers.

#+NAME: line-numbers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
  (defvar my-linum-current-line-number 0)
  (setq linum-format 'my-linum-relative-line-numbers)

  ;; This fancy function handles the math behind relative line numbers
  (defun my-linum-relative-line-numbers (line-number)
  (let ((y (1+ (- line-number my-linum-current-line-number))))
      (propertize
      (number-to-string
          (cond ((<= y 0) (abs (- y 2))) ((> y 0) y)))
          'face 'linum)))

  (defadvice linum-update (around my-linum-update)
  (let ((my-linum-current-line-number (line-number-at-pos)))
      ad-do-it))

  ;; Turn it on
  (ad-activate 'linum-update)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  treemacs-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (linum-mode 0))))
#+END_SRC

**** Modes
***** Window minor modes
I like these window related minor modes.

#+NAME: windows-ui-settings
#+BEGIN_SRC emacs-lisp
  ;; Turn off UI junk
  ;; Note to future self: If you have problems with these later,
  ;; move these into custom file and set variable custom-file
  (column-number-mode)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (winner-mode 1) ;; ctrl-c left, ctrl-c right for window undo/redo
#+END_SRC

***** Set mode margins
This is used primarily to center org mode text.

#+NAME: mode-margins
#+BEGIN_SRC emacs-lisp
(defun dl/org-mode-visual-fill ()
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . dl/org-mode-visual-fill))
#+END_SRC

**** Colors
***** Rainbow delimiters
Makes my lisp parens pretty, and easy to spot.

#+NAME: rainbow-delmiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

***** Color definitions
Define a global set of colors to be used everywhere in Emacs.

#+NAME: color-definitions
#+BEGIN_SRC emacs-lisp
(defvar dl/black-color "#1F2528")
(defvar dl/red-color "#EC5F67")
(defvar dl/yellow-color "#FAC863")
(defvar dl/blue-color "#6699CC")
(defvar dl/green-color "#99C794")
(defvar dl/purple-color "#C594C5")
(defvar dl/teal-color "#5FB3B3")
(defvar dl/light-grey-color "#C0C5CE")
(defvar dl/dark-grey-color "#65737E")
#+END_SRC

**** Addons
***** "Powerline"
Keeps info at my fingertips. Modeline is much better than Vim's Powerline (sorry Vim).

#+NAME: modeline
#+BEGIN_SRC emacs-lisp
  ;; Run M-x all-the-icons-install-fonts to install
  (use-package all-the-icons)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC

***** Treemacs
Although I'm primarily a keyboard user and use Projectile for quickly finding files, I still find the need to browse through files in a more visual way. Treemacs does the job, and beautifully might I add.

#+NAME: modeline
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :config
      (setq treemacs-is-never-other-window 1)
    :bind
      ("C-c t" . treemacs-find-file)
      ("C-c b" . treemacs-bookmark))

  (use-package treemacs-icons-dired)
  (use-package treemacs-all-the-icons)
  (use-package treemacs-projectile)
  (use-package treemacs-magit)
  (use-package treemacs-evil)
#+END_SRC

**** Easy window motions with ace-window
Predefine windows with hotkeys and jump to them.

#+BEGIN_SRC emacs-lisp
;; Remove binding for facemap-menu, use for ace-window instead
(global-unset-key (kbd "M-o"))

(use-package ace-window
  :bind (("M-o" . ace-window))
  :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
  :config
    (ace-window-display-mode 1))
#+END_SRC

*** Package managers
Using straight.el under the hood of use-package enables us to download packages using git. This is preferred for easier hacking.

*** Windows
**** Defaults
Sets some reasonable defaults.

#+NAME: windows-reasonable-defaults
#+BEGIN_SRC emacs-lisp
  ;; Maximize window on initialize
  ;; (add-hook 'window-setup-hook 'toggle-frame-maximized t)
  (when window-system (set-frame-size (selected-frame) 120 60))
  (setq use-dialog-box nil
      use-file-dialog nil
      cursor-type 'bar)
#+END_SRC

**** Fonts
[[https://sourcefoundry.org/hack/][Hack]] is a code-friendly typeface. I really like it.

#+NAME: fonts
#+BEGIN_SRC emacs-lisp
  ;; Set the default pitch face
  (when (system-is-linux)
    (set-face-attribute 'default nil :font "Hack" :height 100))
  (when (system-is-mac)
    (set-face-attribute 'default nil :font "Hack" :height 130))

  ;; Set the fixed pitch face
  (when (system-is-linux)
    (set-face-attribute 'fixed-pitch nil :font "Hack" :weight 'normal :height 100))
  (when (system-is-mac)
    (set-face-attribute 'fixed-pitch nil :font "Hack" :weight 'normal :height 140))

  ;; Set the variable pitch face
  (when (system-is-linux)
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :weight 'medium :height 120))
  (when (system-is-mac)
    (set-face-attribute 'variable-pitch nil :font "Helvetica" :weight 'normal :height 170))
#+END_SRC

** Keybindings
*** Spaces over tabs
We use two spaces in place of tabs.

#+NAME: next-buffer
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                js-indent-level 2
                tab-width 2)
#+END_SRC

*** Buffers
#+NAME: next-buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-tab>") 'next-buffer)
#+END_SRC

** Display Options
*** Themes
Some my own, some from others.

#+NAME: themes-autothemer
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  (load-theme 'doom-ayu-mirage t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+END_SRC

** Global Settings

*** Global Modes
I like these modes, what can I say. They're good to me.

#+NAME: global-modes
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p) ;; Use Y or N in prompts, instead of full Yes or No

  (global-visual-line-mode t) ;; Wraps lines everywhere
  (line-number-mode t) ;; Line numbers in the gutter
  (show-paren-mode t) ;; Highlights parans for me

  (setq warning-minimum-level :error)
#+END_SRC

** Org mode
*** Install package
If you haven't heard of org mode, go watch [[https://www.youtube.com/watch?v=SzA2YODtgK4][this]] talk and come back when you are finished.

**** Quick Snippets

Simple snippets using leader keys. I'll convert to yas-snippets when this needs an upgrade.
#+NAME::org-mode-quick-entry
#+BEGIN_SRC emacs-lisp

(defvar current-time-format "%H:%M:%S"
  "Format of date to insert with `insert-current-time' func.
Note the weekly scope of the command's precision.")

(defun dl/reload-emacs ()
  "Reload the emacs configuration"
  (interactive)
  (load "~/.emacs"))

(defun dl/insert-current-time ()
  "Insert the current time (1-week scope) into the current buffer."
       (interactive)
       (insert "** ")
       (insert (format-time-string current-time-format (current-time)))
       (insert "\n"))

 (dl/leader-keys
  "e" '(dl/reload-emacs :which-key "reload emacs conf")
  ","  '(dl/insert-current-time :which-key "current time"))

#+END_SRC

***** Roam capture templates
These are templates used to create new notes.

#+NAME::roam-templates
#+BEGIN_SRC emacs-lisp
  (setq org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n")
      :unnarrowed t)
     ("a" "area" plain
      "#+filetags: Area\n\n* Goals\n\n%^{Goals}\n\n* Tasks\n\n** TODO %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
      :unnarrowed t)
     ("j" "project" plain
      "#+filetags: Project\n\n* Goals\n\n%^{Goals}\n\n* Tasks\n\n** TODO %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
      :unnarrowed t)
     ("p" "people" plain
      "#+filetags: People CRM\n\n* Contacts\n\nRelationship: %^{Relationship}\nPhone:\nAddress:\nBirthday:\n\n* Notes\n\n %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
      :unnarrowed t)
     ("i" "institution" plain
      "#+filetags: Institution CRM\n\n* Contacts\n\nRelationship: %^{Relationship}\nPhone:\nAddress:\n\n* Notes\n\n %?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
      :unnarrowed t)))
#+END_SRC

**** Org Roam
***** Install package
#+NAME::org-roam-package
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
        :straight (:host github :repo "dustinlyons/org-roam"
                   :branch "add-query-feature"
                   :files (:defaults "extensions/*")
        :build (:not compile))
       :init
         (setq org-roam-v2-ack t) ;; Turn off v2 warning
         (setq org-roam-mode-section-functions
           (list #'org-roam-backlinks-section
            #'org-roam-reflinks-section
            #'org-roam-unlinked-references-section))
         (add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))
       :custom
         (org-roam-directory (file-truename "~/State/Areas/Writing/Notebook"))
         (org-roam-dailies-directory "daily/")
         (org-roam-completion-everywhere t)
       :bind
         (("C-c r b" . org-roam-buffer-toggle)
          ("C-c r t" . org-roam-dailies-goto-today)
          ("C-c r y" . org-roam-dailies-goto-yesterday)
          ("C-M-n" . org-roam-node-insert)
          :map org-mode-map
          ("C-M-i"   . completion-at-point)
          ("C-M-f" . org-roam-node-find)
          ("C-M-c" . dl/org-roam-create-id)
          ("C-<left>" . org-roam-dailies-goto-previous-note)
          ("C-`" . org-roam-buffer-toggle)
          ("C-<right>" . org-roam-dailies-goto-next-note)))
  (org-roam-db-autosync-mode)
#+END_SRC

***** Configure templates
#+NAME::org-roam-templates
#+BEGIN_SRC emacs-lisp
  (setq org-roam-dailies-capture-templates
    '(("d" "default" entry
       "* %?"
       :if-new (file+head "%<%Y-%m-%d>.org"
                          "#+TITLE: %<%Y-%m-%d>\n#+filetags: Daily\n\n"))))
#+END_SRC

***** Extending Roam
Here we add additional function to org-roam to either do something specific for more workflow, or otherwise make ~org-roam~ more full featured.

****** Set CREATED and LAST_MODIFIED filetags on save
Sets timestamps in the Properties drawer of files. I intend to use this one day when rendering these notes as HTML, to quickly see files last touched.

#+NAME::org-roam-set-timestamps-on-save
#+BEGIN_SRC emacs-lisp
  (defvar dl/org-created-property-name "CREATED")

  (defun dl/org-set-created-property (&optional active name)
    (interactive)
    (let* ((created (or name dl/org-created-property-name))
           (fmt (if active "<%s>" "[%s]"))
           (now (format fmt (format-time-string "%Y-%m-%d %a %H:%M"))))
      (unless (org-entry-get (point) created nil)
        (org-set-property created now)
        now)))

  (defun dl/org-find-time-file-property (property &optional anywhere)
    (save-excursion
      (goto-char (point-min))
      (let ((first-heading
             (save-excursion
               (re-search-forward org-outline-regexp-bol nil t))))
        (when (re-search-forward (format "^#\\+%s:" property)
                                 (if anywhere nil first-heading) t)
          (point)))))

  (defun dl/org-has-time-file-property-p (property &optional anywhere)
    (when-let ((pos (dl/org-find-time-file-property property anywhere)))
      (save-excursion
        (goto-char pos)
        (if (and (looking-at-p " ")
                 (progn (forward-char)
                        (org-at-timestamp-p 'lax)))
            pos -1))))

  (defun dl/org-set-time-file-property (property &optional anywhere pos)
    (when-let ((pos (or pos
                        (dl/org-find-time-file-property property))))
      (save-excursion
        (goto-char pos)
        (if (looking-at-p " ")
            (forward-char)
          (insert " "))
        (delete-region (point) (line-end-position))
        (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
          (insert now)))))

  (defun dl/org-set-last-modified ()
    "Update the LAST_MODIFIED file property in the preamble."
    (when (derived-mode-p 'org-mode)
      (dl/org-set-time-file-property "LAST_MODIFIED")))
#+END_SRC

****** Set CREATED on node creation
#+NAME::org-roam-set-timestamps-on-save
#+BEGIN_SRC emacs-lisp
  (defun dl/org-roam-create-id ()
  "Add created date to org-roam node."
    (interactive)
    (org-id-get-create)
    (dl/org-set-created-property))
#+END_SRC

*** Agenda
**** Filter out files that don't include tasks in org-agenda
I use org-roam to take notes, which keeps many small files in the style of Zettelkasten. However, org-agenda doesn't perform well in this scenario. To fix this, we filter out all files from org-agenda that don't contain a ~TODO~.

#+NAME::org-mode-filter
#+BEGIN_SRC emacs-lisp
  (defun dl/define-agenda-files ()
    "Return a list of note files containing 'HasTodo' tag."
  (interactive)
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
        :from tags
        :left-join nodes
        :on (= tags:node-id nodes:id)
        :where (in tag $v1)] '(["Project" "Area" "Daily"])))))

  ;; Roam Daily Log and Project Files only
   (setq org-agenda-files (dl/define-agenda-files))

  (dl/leader-keys
    "a"  '(:ignore t :which-key "manage org-agenda")
    "aa"  '(dl/define-agenda-files :which-key "refresh agenda db")
    "ar"  '(org-roam-refile :which-key "refile a TODO"))

#+END_SRC
**** Set org faces
Set various face colors for org-mode.

#+NAME::org-mode-faces
#+BEGIN_SRC emacs-lisp
  ;; Fast access to tag common contexts I use
  (setq org-tag-persistent-alist
    '(("Inbox" . ?i)("#Daily" . ?d) ("@Home" . ?h) ("@Amanda" . ?a)("@Justin" . ?j)
     ("@Car" . ?c) ("@Office" . ?o) ("#Phone" . ?p) ("#Computer" . ?u)))
    ;;'(("#Inbox" . ?i) ("#Daily" . ?d) ("@Zeroed" . ?z) ("@ScholarRx" . ?s)("@Braeview" . ?b)
    ;; ("@Errands" . ?e) ("@Play" . ?p) ))

  (setq org-todo-keyword-faces
    `(("NEXT" . ,dl/yellow-color)
     ("WAITING" . ,dl/light-grey-color)
     ("SOMEDAY" . ,dl/dark-grey-color)))

  (setq org-tag-faces
    `(("@Home" . ,dl/green-color)
     ("@Car" . ,dl/purple-color)
     ("@Office" . ,dl/teal-color)
     ("Inbox" . ,dl/blue-color)))
#+END_SRC
#
**** Remove noise from org-agenda views
This block sets the ~org-agenda-prefix-format~ in an friendly way for org-roam (credit to [[https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html][this post)]]. It truncates long filenames and removes the org-roam timestamp slug.

#+NAME::remove-noise-from-org-agenda
#+BEGIN_SRC emacs-lisp
  (defun dl/buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                               (point-max) t)
        (buffer-substring-no-properties
         (match-beginning 1)
         (match-end 1)))))

  (defun dl/agenda-category (&optional len)
    "Get category of item at point for agenda."
    (let* ((file-name (when buffer-file-name
                        (file-name-sans-extension
                         (file-name-nondirectory buffer-file-name))))
           (title (dl/buffer-prop-get "title"))
           (category (org-get-category))
           (result
            (or (if (and
                     title
                     (string-equal category file-name))
                    title
                  category)
                "")))
      (if (numberp len)
          (s-truncate len (s-pad-right len " " result))
        result)))

  (setq org-agenda-prefix-format
        '((agenda . " %i %(dl/agenda-category 32)%?-32t% s")
          (todo . " %i %(dl/agenda-category 32) ")
          (tags . " %i %(dl/agenda-category 32) ")
          (search . " %i %(dl/agenda-category 32) ")))
#+END_SRC

**** org-super-agenda views
Setup for org-super-agenda and org-ql.

#+NAME::org-super-agenda
#+BEGIN_SRC emacs-lisp
    (use-package org-super-agenda
       :after org-agenda
       :init
         (setq org-agenda-dim-blocked-tasks nil))

     ;; Dashboard View
     (setq org-super-agenda-groups
          '((:name "Priority"
                   :priority "A")
            (:name "Inbox"
                   :tag ("Inbox" "Daily"))
            (:name "Next Actions at Office"
                   :and (
                   :todo ("NEXT")
                   :tag ("Active")
                   :tag ("@Office")))
            (:name "Next Actions at Home"
                   :and (
                   :todo ("NEXT")
                   :tag ("Active")
                   :tag ("@Home")))
            (:name "Waiting"
                   :todo "WAITING")
            (:name "Maintenance"
                   :todo "MAINTAIN")
            (:name "Home"
                   :tag "@Home")
            (:name "Office"
                   :tag "@Office")
            (:name "Braeview"
                   :tag "Braeview")
            (:name "Productivity"
                   :tag "Productivity")
            (:name "Someday"
                   :todo "SOMEDAY")))

     (org-super-agenda-mode)
#+END_SRC

*** UI improvements
Anything related to making org mode pretty.

**** Change default bullets to be pretty

Replaces the standard org-mode header asterisks with dots.
#+NAME::org-mode-visuals
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
      (org-superstar-remove-leading-stars t)
      (org-superstar-headline-bullets-list '("•" "•" "•" "◦" "◦" "◦" "◦")))
#+END_SRC

**** Fonts
#+NAME::org-mode-variable-width-fonts
#+BEGIN_SRC emacs-lisp
  (require 'org-indent)
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  (when (system-is-linux)
    (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.2))
  (when (system-is-mac)
    (set-face-attribute 'variable-pitch nil :font "Helvetica" :height 120))
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.15)
                  (org-level-3 . 1.1)
                  (org-level-4 . 1.05)
                  (org-level-5 . 1.05)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
 (when (system-is-linux)
   (set-face-attribute (car face) nil :font "Cantarell" :weight 'medium :height (cdr face)))
 (when (system-is-mac)
   (set-face-attribute 'variable-pitch nil :font "Helvetica" :weight 'medium :height 170)))
#+END_SRC

** Evil mode (aka Vim mode)
*** Install package
This is what makes emacs possible for me. All evil mode packages and related configuration.

#+NAME: evil-packages
#+BEGIN_SRC emacs-lisp
    (defun dl/evil-hook ()
      (dolist (mode '(eshell-mode
                      git-rebase-mode
                      term-mode))
      (add-to-list 'evil-emacs-state-modes mode))) ;; no evil mode for these modes

    (setq evil-want-keybinding nil)

    (use-package evil
      :init
        (setq evil-want-integration t) ;; TODO: research what this does
        (setq evil-want-fine-undo 'fine) ;; undo/redo each motion
        (setq evil-want-Y-yank-to-eol t) ;; Y copies to end of line like vim
        (setq evil-want-C-u-scroll t) ;; vim like scroll up
        (evil-mode 1)
        :hook (evil-mode . dl/evil-hook)
      :config
        ;; Emacs "cancel" == vim "cancel"
        (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

        ;; Ctrl-h deletes in vim insert mode
        (define-key evil-insert-state-map (kbd "C-h")
          'evil-delete-backward-char-and-join)

        ;; When we wrap lines, jump visually, not to the "actual" next line
        (evil-global-set-key 'motion "j" 'evil-next-visual-line)
        (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

        (evil-set-initial-state 'message-buffer-mode 'normal)
        (evil-set-initial-state 'dashboard-mode 'normal))

    ;; Gives me vim bindings elsewhere in emacs
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

    ;; Keybindings in org mode
    (use-package evil-org
      :after evil
      :hook
        (org-mode . (lambda () evil-org-mode))
      :config
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))

    ;; Branching undo system
    (use-package undo-tree
      :after evil
      :diminish
      :config
      (evil-set-undo-system 'undo-tree)
      (global-undo-tree-mode 1))

#+END_SRC

** Managing files
Configuration related to filesystem, either basic IO and interaction from emacs or directly moving files around where it makes sense.

*** Backups and auto-save
These settings keep emacs from littering the filesystem with buffer backups. These files look like ~~yourfilename.txt~ or ~#yourfilename.txt#~ and would otherwise be dropped in your working directory.

#+NAME: backup-files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . "~/.emacs.d/backups/"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t) ; Automatically delete excess backups

(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

*** File browser
Convenient helpers and keybindings when browsing files in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired)

  (use-package dired
    :ensure nil
    :straight nil
    :defer 1
    :commands (dired dired-jump)
    :config
      (setq dired-listing-switches "-agho --group-directories-first")
      (setq dired-omit-files "^\\.[^.].*")
      (setq dired-omit-verbose nil)
      (setq dired-hide-details-hide-symlink-targets nil)
      (setq delete-by-moving-to-trash t)
      (autoload 'dired-omit-mode "dired-x")
      (add-hook 'dired-load-hook
            (lambda ()
              (interactive)
              (dired-collapse)))
      (add-hook 'dired-mode-hook
            (lambda ()
              (interactive)
              (dired-omit-mode 1)
              (dired-hide-details-mode 1)
              (all-the-icons-dired-mode 1))
              (hl-line-mode 1)))

  (use-package dired-single)
  (use-package dired-ranger)
  (use-package dired-collapse)

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "c" 'find-file
    "H" 'dired-omit-mode
    "l" 'dired-single-buffer
    "y" 'dired-ranger-copy
    "X" 'dired-ranger-move
    "p" 'dired-ranger-paste)

  ;; Darwin needs ls from coreutils for dired to work
  (when (system-is-mac)
    (setq insert-directory-program
      (expand-file-name ".nix-profile/bin/ls" (getenv "HOME"))))
#+END_SRC

** Managing projects
*** Projectile
Projectile enables me organize projects with a killer grep interface.
#+NAME: projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom
      ((projectile-completion-system 'ivy))
    :bind-keymap
	    ("C-c p" . projectile-command-map)
    :init
	    (when (file-directory-p "mnt/state/Projects/Code")
	      (setq projectile-project-search-path "mnt/state/Projects/Code"))
	    (setq projectile-switch-project-action #'projectile-dired))

  ;; Gives me Ivy options in the Projectile menus
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+END_SRC

** Writing
*** Spell Check / Flycheck Mode
Everything related to spell and grammar checking.

#+NAME: spell-check
#+BEGIN_SRC emacs-lisp

  (use-package flycheck-grammarly)
  (defun spell() (interactive) (flyspell-mode 1))

  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

  (use-package flyspell-correct-ivy
    :after flyspell-correct)

  ;; Add spell check for git commits
  (add-hook 'git-commit-mode-hook 'turn-on-flyspell)

(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'org-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

** Coding
*** Compile buffers

Everything related to M-x compile.

#+NAME: compilation-buffer
#+BEGIN_SRC emacs-lisp
;; Auto scroll the buffer as we compile
(setq compilation-scroll-output t)

;; By default, eshell doesn't support ANSI colors. Enable them for compilation.
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

*** Languages
**** HTML
***** Emmet mode
Emmet mode gives autocompletion for HTML tags using short hand notations, which for I use the TAB key.

#+NAME: html-auto-completion
#+BEGIN_SRC emacs-lisp

(use-package emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook  'emmet-mode)
(define-key emmet-mode-keymap [tab] 'emmet-expand-line)

#+END_SRC

***** Rainbow mode
Rainbow mode is an Emacs minor mode to highlight the color shown by a RGB hex triplet (example #FFFFFF).

#+NAME: rainbow-mode
#+BEGIN_SRC emacs-lisp
  ;; Minor mode to show HTML hex colors
  (use-package rainbow-mode)
#+END_SRC

**** CSS
#+NAME: html-auto-completion
#+BEGIN_SRC emacs-lisp
(use-package lsp-tailwindcss
        :straight (:host github :repo "merrickluo/lsp-tailwindcss"))
#+END_SRC

**** Nix
#+NAME: html-auto-completion
#+BEGIN_SRC emacs-lisp
(add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
(lsp-register-client
 (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
                  :major-modes '(nix-mode)
                  :server-id 'nix))
#+END_SRC

**** Javascript
#+NAME: javascript
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp lsp-deferred
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
      (lsp-ui-doc-position 'bottom))

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
          ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
     :custom
       (company-minimum-prefix-length 1)
       (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package vue-mode)

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

  ;; Fixes flycheck in vue-mode (Vue.js)
  ;; https://emacs-lsp.github.io/lsp-mode/page/faq/
  (with-eval-after-load 'lsp-mode
    (mapc #'lsp-flycheck-add-mode '(typescript-mode js-mode css-mode vue-html-mode)))

  ;; Using flycheck with Grammarly for now, turning this off
  ;;(add-to-list 'lsp-language-id-configuration '(org-mode . "plaintext"))
#+END_SRC

*** Git
#+NAME: magit-git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch))
#+END_SRC

**** File types
***** Markdown mode
#+NAME: markdown-mode
#+BEGIN_SRC emacs-lisp
  ;; This uses Github Flavored Markdown for README files
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
      ("\\.md\\'" . markdown-mode)
      ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))
#+END_SRC

*** Infrastructure
**** Nix
Nix is my package manager and operating system of choice; this mode enables me to have a better time writing Nix expressions.

#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src

*** Quality of Life

Delete trailing whitespace on save.

#+NAME: trailing-whitespace-on-save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Writing

*** Update Table of Contents on Save

I use =org-make-toc= to automatically update the Table of Contents in any header with a property named =TOC=.

#+begin_src emacs-lisp
  (use-package org-make-toc)
  (add-hook 'org-mode-hook #'org-make-toc-mode)
#+end_src

** Learning Emacs
These packages may come and go, but ultimately aid in my understanding of emacs and emacs lisp.

*** Indent org-babel source blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively nil)
#+END_SRC

*** Show real-time key bindings in a separate buffer
#+NAME: command-log
#+BEGIN_SRC emacs-lisp
  ;; Gives me a fancy list of commands I run
  (use-package command-log-mode)
  (setq global-command-log-mode t)
  ;; TODO Install package that lets you define help screens for keymaps
#+END_SRC

*** Panel popup to show key bindings
#+NAME: which-key
#+BEGIN_SRC emacs-lisp
  ;; Gives me a fancy list of commands I run
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC

*** Helpful documentation strings for common functions

#+NAME: helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
    ;; Remap Counsel help functions
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
      :bind
    ;; Remap default help functions
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+END_SRC
